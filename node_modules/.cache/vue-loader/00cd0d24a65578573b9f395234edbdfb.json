{"remainingRequest":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\fortm\\WebstormProjects\\Frontend\\src\\components\\Footer.vue?vue&type=template&id=40ab164b&scoped=true&","dependencies":[{"path":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\src\\components\\Footer.vue","mtime":1623849160996},{"path":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\fortm\\WebstormProjects\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}